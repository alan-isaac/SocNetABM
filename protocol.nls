; the reporters for the behaviorspace run


; reports true if the run has been run for the minimum number of rounds, all 
; scientists have converged and have become sufficiently confident in their 
; beliefs
to-report exit-condition
  ifelse converged [
    calc-confidence
    if converged-ticks = 0 [
      set-converge-reporters-values
    ]
    set converged-ticks converged-ticks + 1
    let min-confidence [confidence] of min-one-of turtles [confidence]
    ifelse min-confidence > confidence-cutoff [
      report true
    ][
      if ticks >= max-ticks [
        report true
      ]
      report false
    ]
  ][
    set converged-ticks 0
    if ticks >= max-ticks [
      set-converge-reporters-values
      report true
    ]
    report false
  ]
end





; reports true if all scientists converged to one theory and consider this theory
; to be among their best theories
to-report converged
  let count-th1-scientists count turtles with [
    mytheory = 0 and member? 0 cur-best-th]  
  ifelse count-th1-scientists = scientists or
    count turtles with [mytheory = 1 and member? 1 cur-best-th] = scientists [
    ifelse count-th1-scientists > 0 [
      if last-converged-th = 1 [
        set converged-ticks 0
      ]
      set last-converged-th 0
    ][
      if last-converged-th = 0 [
        set converged-ticks 0
      ]
      set last-converged-th 1
    ]
    report true
  ][
    report false
  ]
end





; reports 1 if scientists converged on the best theory (th1) by the end of the 
; run, 0 otherwise
to-report successful-run
  ifelse count turtles with [mytheory = 0] = scientists [
    report 1
  ][
    report 0
  ]
end





to-report translate-from-string [string]
  let value-to-report 0
  if string = "th2" [
    set value-to-report 1
  ]
  report value-to-report
end





; reports the number of researchers on th# at the end of the run
to-report run-end-scientists [th#]
  set th# translate-from-string th#
  report count turtles with [mytheory = th#]
end





to-report average-jumps
  let jumps 0
  let avgjumps 0
  ask turtles [
    set jumps times-jumped + jumps
  ]
  set avgjumps (jumps / scientists)
  report avgjumps
end





; reports the average proportion of time the researchers considered both 
; theories equally good. The +1 accounts for the extra calculation already 
; taking place during the setup
to-report avg-indiff-time
  let avg-indiff-time-cache 0
  ifelse converged-ticks = 0 [
    set avg-indiff-time-cache (indiff-count / (scientists * (ticks + 1)))
  ][
    set avg-indiff-time-cache 
      (indiff-count / (scientists * (round-converged + 1)))
  ]
  report avg-indiff-time-cache
end





; reports the last time-point scientists converged. The + 1 correction is due 
; to the way how `converged-ticks` is set.
to-report round-converged
  report ticks - converged-ticks + 1
end





; reports the current average signal for th# and updates the global
; `th-i-signal` accordingly
to-report average-signal [th#]
  if critical-interaction and th-i-signal = (list th1-signal th2-signal) [
    set th-i-signal [0 0]
    ask turtles [
      set th-i-signal (map + th-i-signal subj-th-i-signal) 
    ]
    set th-i-signal map [ cur-th-signal -> cur-th-signal / scientists]
      th-i-signal
  ]
  set th# translate-from-string th#
  report item th# th-i-signal
end





to set-converge-reporters-values
  set converge-reporters-values map [curreporter -> runresult curreporter] 
    converge-reporters
end





; arguments: th# = theory, type: string; rec = recording?, type: boolean
to-report average-belief [th# rec?]
  let identifier "avgbelief"
  ifelse rec? [
    let avg-belief [0 0]
    ask turtles [
      set avg-belief (map + avg-belief current-theory-info)
    ]
    set avg-belief map [cur-avg-belief -> cur-avg-belief / scientists] 
      avg-belief
    report fput identifier avg-belief
  ][
    set th# translate-from-string th#
    let avg-belief but-first first filter [curitem -> 
      first curitem = identifier] converge-reporters-values
    report item th# avg-belief
  ]
end





; reports the average cumulative successes (= turtle-owned variable `a`) for th#
to-report average-cum-successes [th# rec?]
  let identifier "avgsuc"
  ifelse rec? [
    let avg-suc [0 0]
    ask turtles [
      set avg-suc (map + avg-suc a)
    ]
    set avg-suc map [cur-avg-suc -> cur-avg-suc / scientists] 
      avg-suc
    report fput identifier avg-suc
  ][
    set th# translate-from-string th#
    let avg-suc but-first first filter [curitem -> 
      first curitem = identifier] converge-reporters-values
    report item th# avg-suc
  ]
end





; reports the average confidence of scientists; if scientists haven't 
; converged reports 0
to-report average-confidence [rec?]
  let identifier "avgconfidence"
  ifelse rec? [
    if not converged [
      report (list identifier 0)
    ]
    let avg-confidence mean [confidence] of turtles
    report (list identifier avg-confidence)
  ][
    let avg-confidence item 1 first filter [curitem -> 
      first curitem = identifier] converge-reporters-values
    report avg-confidence
  ]
end





; reports how many scientists were on each theory at the start of the run
to-report run-start-scientists [th#]
  set th# translate-from-string th#
  report item th# run-start-scientists-save
end

